@page "/productos/create/{supermercadoId}"
@using Microsoft.EntityFrameworkCore
@using SuperOferta.Models
@inject SupermercadoContext context
@inject NavigationManager NavigationManager
@inject ISupermercadoService SupermercadoService
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Producto</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Producto" OnValidSubmit="AddProducto" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="productoname" class="form-label">ProductoName:</label>
                <InputText id="productoname" @bind-Value="Producto.ProductoName" class="form-control" />
                <ValidationMessage For="() => Producto.ProductoName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="fechacaducidad" class="form-label">FechaCaducidad:</label>
                <InputDate id="fechacaducidad" @bind-Value="Producto.FechaCaducidad" class="form-control" />
                <ValidationMessage For="() => Producto.FechaCaducidad" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="precio" class="form-label">Precio:</label>
                <InputNumber id="precio" @bind-Value="Producto.Precio" class="form-control" />
                <ValidationMessage For="() => Producto.Precio" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="descripcion" class="form-label">Descripcion:</label>
                <InputText id="descripcion" @bind-Value="Producto.Descripcion" class="form-control" />
                <ValidationMessage For="() => Producto.Descripcion" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="categoria" class="form-label">Categoría:</label>
                <InputSelect id="categoria" @bind-Value="CategoriaSeleccionada" @oninput="OnCategoriaChanged" class="form-control">
                    <option value="" >-- Seleccionar --</option>
                    @foreach (var categoria in categorias.Keys)
                    {
                        <option value="@categoria" >@categoria</option>
                    }
                    
                </InputSelect>
               
                    <label for="subcategoria" class="form-label mt-3">Subcategoría:</label>
                    <InputSelect id="subcategoria" @bind-Value="SubcategoriaSeleccionada" class="form-control">
                        <option value="">-- Seleccionar --</option>
                        
                    @foreach (var subcategoria in subcategorias)
                        {
                            <option value="@subcategoria">@subcategoria</option>
                        }

                    </InputSelect>

        
                </div>
                <p class="mt-3">
                    <strong>Categoría seleccionada:</strong> @CategoriaSeleccionada<br />
                    
                </p>
          
            <p class="mt-3">
               
                <strong>Subcategoría seleccionada:</strong> @SubcategoriaSeleccionada
            </p>
            <div class="mb-3">
                <label for="imagen" class="form-label">imagen:</label>
                <InputText id="imagen" @bind-Value="Producto.imagen" class="form-control" />
                <ValidationMessage For="() => Producto.imagen" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/productos">Back to List</a>
</div>

@code {

    [Parameter]
    public string? supermercadoId { get; set; }
    [SupplyParameterFromForm]
    private Producto Producto { get; set; } = new();

    public Supermercado? supermercado { get; set; }

    //private List<string> Opciones = new List<string> { "Opción 1", "Opción 2", "Opción 3" };
    public Dictionary<string, List<string>> categorias = new();

    public string CategoriaSeleccionada { get; set; } = "";
    public string SubcategoriaSeleccionada { get; set; } = "";
    public List<string> subcategorias { get; set; } = new List<string>();
    public bool categoriaCargado { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        supermercado = await context.Supermercados.FindAsync(int.Parse(supermercadoId));
        categorias.Add("Almacen", new List<string> { "Arroz", "Harina", "Azúcar", "Conservas" });
        categorias.Add("Bebidas", new List<string> { "Agua", "Jugos", "Refrescos", "Cerveza" });
        categorias.Add("Frescos", new List<string> { "Carnes", "Pescados", "Verduras", "Frutas" });
        categorias.Add("Congelados", new List<string> { "Pizzas", "Helados", "Verduras Congeladas", "Comida Rápida" });
        categorias.Add("Limpieza", new List<string> { "Detergentes", "Desinfectantes", "Limpiadores", "Bolsas de basura" });
        categorias.Add("Perfumeria", new List<string> { "Shampoo", "Crema hidratante", "Fragancias", "Desodorantes" });
        categorias.Add("Electro", new List<string> { "Televisores", "Celulares", "Computadoras", "Electrodomésticos" });
        categorias.Add("Textil", new List<string> { "Ropa", "Zapatos", "Accesorios", "Bolsos" });
        categorias.Add("Hogar", new List<string> { "Muebles", "Decoración", "Lámparas", "Accesorios de cocina" });
        categorias.Add("Aire Libre", new List<string> { "Carpas", "Sillas de camping", "Bicicletas", "Accesorios de pesca" });



    }
    private async Task OnCategoriaChanged(ChangeEventArgs e)
    {
        CategoriaSeleccionada = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(CategoriaSeleccionada))
        {
            subcategorias.Clear(); // Limpiar las subcategorías si no hay una categoría seleccionada
        }
        else
        {
            subcategorias = categorias[CategoriaSeleccionada];
        }

        SubcategoriaSeleccionada = string.Empty; // Reiniciar la subcategoría seleccionada}
                                                 // Fuerza la actualización de la interfaz
        StateHasChanged();
    }

 

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProducto()
    {
        if (string.IsNullOrEmpty(SubcategoriaSeleccionada))
        {
            // Manejar el caso cuando la subcategoría no se seleccionó
            return;
        }
        
        Producto.categoria = SubcategoriaSeleccionada;
        supermercado.Productos.Add(Producto);
        await SupermercadoService.updateSupermercado(supermercado);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/panellpartner");

    }
}