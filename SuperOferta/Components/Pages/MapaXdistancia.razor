@page "/MapasDistancia/{distanciaACom}/{cadenaApasar}"
@inject IJSRuntime JS
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components

<h1>Ver los supermercados por kilometros</h1>
@foreach(var item in listSupermercados)
{
    <p>@item</p>
}






<button class="btn btn-outline-success" data-toggle="tooltip" title="Exportar" @onclick="Export">Ver supermercados cerca</button>
<div class="qr-code-container">
    <div class="qr-code" style></div>
</div>
<div id="map" class="map" style="height:500px;width:500px"></div>

<script>
        window.GenerarMapa = async (distanciaACom,listSupermercados) => {
        const coord1 = L.latLng(-34.6037, -58.3816); // Buenos Aires
        const coord2 = L.latLng(-34.9205, -57.9536); // La Plata

        // Distancia en metros
        const distancia = coord1.distanceTo(coord2);
        console.log(`La distancia es: ${(distancia / 1000).toFixed(2)} km`);


       


         



        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var userLat = position.coords.latitude;
                var userLng = position.coords.longitude;
                let count = 0;
                let coordenada1;
                let coordenada2;
                let compararDistancia;
                let ubicacionx ;
                let ubicaciony;
                let nombreMarket;
                var map = L.map('map').setView([userLat, userLng], 15);
                // Agregar un marcador para la ubicación actual del usuario
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
              
                L.marker([userLat, userLng]).addTo(map)
                    .bindPopup("Estás aquí")
                    .openPopup();

                
                listSupermercados.forEach((elemento) => {
                    if (count === 0) {
                        ubicacionx = elemento
                        count = count + 1;
                    } else {
                        if (count === 1) {
                            ubicaciony = elemento
                            count = count + 1;
                        } else {
                            if (count === 2) {
                                nombreMarket = elemento;
                                console.log(ubicacionx);
                                coordenada1 = L.latLng(Number(ubicacionx),Number(ubicaciony));
                                coordenada2 = L.latLng(Number(userLat),Number(userLng));
                                compararDistancia = coordenada2.distanceTo(coordenada1);
                                console.log((compararDistancia / 1000).toFixed(2));
                                console.log(`La distancia es: ${(compararDistancia / 1000).toFixed(2)} km`);
                                if (Number((compararDistancia / 1000).toFixed(2)) < Number(distanciaACom)) {
                                    L.marker([ubicacionx, ubicaciony]).addTo(map)
                                        .bindPopup(nombreMarket)
                                        .openPopup();
                                    count = 0;
                                }else{
                                    count=0;

                                }
                              
                            }
                        }
                    }
                })
              


                // Centrar el mapa en la ubicación del usuario

            }
    );
    }
        }

</script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

@code {
    [Parameter]
    public string distanciaACom { get; set; }
    [Parameter]
    public string cadenaApasar{ get; set; }
    public List<string> listSupermercados = new();

    public string Titulo = "titu";

    protected override async Task OnInitializedAsync()
    {
        string[] elementos = cadenaApasar.Split('&');
        foreach (string elemento in elementos)
        {
            if (!string.IsNullOrEmpty(elemento)) // Ignorar los vacíos
            {
                listSupermercados.Add(elemento);
            }
        }


    }
    public async Task Export()
    {
        Titulo = Titulo + "pasomapa";
        try
        {


            await JS.InvokeVoidAsync("GenerarMapa",int.Parse(distanciaACom), listSupermercados);
            Titulo = Titulo + "pasomapa";

        }
        catch
        {
            Titulo = "nopaso";
        }



    }
    //https://forum.bubble.io/t/jspdf-integration/7618
}


