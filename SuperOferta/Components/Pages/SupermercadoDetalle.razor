@page "/supermercadodetalle"
@inject ISupermercadoService SupermercadoService
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<IdentityUser> UserManager
@inject IUserStore<IdentityUser> UserStore
@inject SignInManager<IdentityUser> SignInManager
@inject IEmailSender<IdentityUser> EmailSender
@inject EmailService EmailService
@inject NavigationManager NavigationManager



<h1>SupermercadoDetalle</h1>

      <p role="status">Current count: @titulo</p>

            <input class="form-control col-sm-4" type="text" @bind-value="supermercado.SupermercadoName" />
            <input class="form-control col-sm-4" type="text" @bind-value="supermercado.Direccion" />     
       
          

       
              
              
                <button class="btn btn-primary" @onclick="SaveSupermercado">Save</button>
                <button class="btn btn-primary" @onclick="Imprimir">Click me</button>
                <input type="button" value="Cancel"/>


<h3>Roles del Usuario</h3>
<ul>
    @foreach (var role in roles)
    {
        <li>@role</li>
    }
</ul>


<h3>Enviar Correo</h3>

<div>
    <label>Destinatario:</label>
    <input @bind="destinatario" type="email" />
</div>
<div>
    <label>Asunto:</label>
    <input @bind="asunto" />
</div>
<div>
    <label>Mensaje:</label>
    <textarea @bind="mensaje"></textarea>
</div>
<button @onclick="EnviarCorreo">Enviar</button>


@if (mensajeConfirmacion != null)
{
    <p>@mensajeConfirmacion</p>
}

@code {

    private string destinatario;
    private string asunto;
    private string mensaje;
    private string mensajeConfirmacion;

    

    private Supermercado supermercado = new Supermercado();
    private String titulo = "primero";
    private List<string> roles = new List<string>();
    protected  async Task SaveSupermercado()
    {
        try
        {
            await SupermercadoService.SaveSupermercado(supermercado);
            titulo = titulo + supermercado.SupermercadoName;

        }
        catch
        {
            titulo = titulo + "error";
        }


    }

    public async Task  Imprimir()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user,"cioncimatias23@gmail.com", CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, "cioncimatias23@gmail.com", CancellationToken.None);
        var result = await UserManager.CreateAsync(user, "AQAAAAIAAYagAAAAEOwFZjdGLq1L56LQ556lnW+sfZCDqToufTg5qadojm8+t5mj5SZWgUCbyXHaLl7hLQ==");
        var userId = await UserManager.GetUserIdAsync(user);
        //  var user2=   await UserManager.FindByIdAsync("1");
        var userEmail = await UserManager.FindByEmailAsync("partner23@gmail.com");

        roles=    (await UserManager.GetRolesAsync(userEmail)).ToList();

           /*
           *
            *    if (roles != null)
               {
               titulo = titulo + "ka"+userEmail.UserName+userId+userEmail.ConcurrencyStamp;
            }
            else
                {
                titulo = titulo + "nulo roles";
           }
           */


        titulo = titulo+ roles.First();
    }
    private IdentityUser CreateUser()
    {
        try
        {

            return Activator.CreateInstance<IdentityUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(IdentityUser)}'. " +
                $"Ensure that '{nameof(IdentityUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<IdentityUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<IdentityUser>)UserStore;
    }
    private async Task EnviarCorreo()
    {
        try
        {
            await EmailService.SendEmailAsync(destinatario, asunto, mensaje);
          
            mensajeConfirmacion = "¡Correo enviado con éxito!";
        }
        catch (Exception ex)
        {
            mensajeConfirmacion = $"Error al enviar el correo: {ex.Message}";
        }
    }
}
}
