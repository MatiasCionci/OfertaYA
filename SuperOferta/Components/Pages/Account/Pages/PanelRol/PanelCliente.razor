@page "/panelcliente"
@using Microsoft.EntityFrameworkCore
@using SuperOferta.Models
@using Microsoft.AspNetCore.Identity
@inject SupermercadoContext context
@inject ServiceRol Servicerol
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using SuperOferta.Components.Pages.Account.Shared
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Cliente")]
<h3>PanelCliente</h3>




<button class="w-100 btn btn-lg btn-primary" @onclick="HabilitarProducto">Buscar por producto</button>
@if (xproducto)
{
    <div class="mb-3">
        <label>Categoria</label>

        <InputSelect id="categorias" @bind-Value="Seleccionada" class="form-control" @onclick="()=>BuscarXProducto(Seleccionada)">
            <option value="">-- Seleccionar --</option>
            @foreach (var opcion in categorias)
            {
                <option value="@opcion">@opcion</option>
            }
        </InputSelect>

    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    Nombre del Supermercado
                </th>
                <th>
                    Direccion
                </th>
                <th>
                    Categoria del Producto
                </th>
                <th>
                    Fecha de Caducidad
                </th>
                <th>
                    Precio
                </th>
                <th>
                    ver en mapa
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var superItem in BusquedaproductosXcategoria)
            {
                <tr>
                    <td>@superItem.SupermercadoName</td>
                    <td>@superItem.Direccion</td>
                    <td>@superItem.productos.First().categoria</td>
                    <td>@superItem.productos.First().FechaCaducidad</td>
                    <td>@superItem.productos.First().Precio</td>
                    <td><a href="/Mapas/@superItem.Coordenadaxx/@superItem.Coordenadayy">enviar</a></td>
                </tr>
            }
        </tbody>
    </table>
    <h2>@Seleccionada</h2>
}
<p>Distancia en km</p>
<input type="number" @bind-value="valorAbuscar" />
<button class="w-100 btn btn-lg btn-primary" @onclick="HabilitarXDistancia">Ver los mas cercano</button>
@if (xdistancia)
{

  
    <td><a href="/MapasDistancia/@valorAbuscar.ToString()/@cadenaAPasar">enviar</a></td>
}
else
{
    
}

@code {

    //  blazor-protectedsessionstorage
    private int valorAbuscar { get; set; } = 0;
    private List<string> categorias = new();
    private string? Seleccionada="";
    private bool xproducto = false;
    private bool xdistancia = false;
    private List<SupermercadosProductosModel> BusquedaproductosXcategoria = new();

    private Producto producto = new();
    private string cadenaAPasar = "";

    protected override async Task OnInitializedAsync()
    {

        categorias.Add("Gaseosa");
        categorias.Add("Lacteos");
        categorias.Add("Arroz 00000 Ala Dorado 1kg");
        categorias.Add("Harina Trigo CASERITA 1kg");
        categorias.Add("Azúcar Superior Real LEDESMA 1kg");
        categorias.Add("Pate De Foie LA BLANCA 90g");

        producto.Descripcion = "desripcion paso";

    }
    private async Task BuscarXProducto(string valor)
    {
        //traerme los supermercados,con el precio del producto
        //ordenados x Valor
        BusquedaproductosXcategoria = context.Supermercados.Include("Productos").Select(s=> new SupermercadosProductosModel()
        {
           productos = s.Productos.Where(p => p.categoria == valor).ToList(),
           SupermercadoName=s.SupermercadoName,
           Direccion=s.Direccion,
           Coordenadaxx=s.Coordenadaxx,
           Coordenadayy=s.Coordenadayy


        }).ToList();
        BusquedaproductosXcategoria = BusquedaproductosXcategoria.Where(b => b.productos.Count > 0).ToList();
        Seleccionada =valor;
    }
    private Action ActionBuscar => () => BuscarXdistancia(valorAbuscar);

    private async Task BuscarXdistancia(int valor)
    {
        xdistancia = true;
        generarCadena();

    }
    private async Task HabilitarProducto()
    {
        xproducto=true;
    }
    private async Task HabilitarXDistancia()
    { 
        generarCadena();
        xproducto = false;
        xdistancia = true;
    }
    private void generarCadena()
    {
        foreach(var item in BusquedaproductosXcategoria)
        {
            cadenaAPasar = cadenaAPasar+item.Coordenadaxx + "&" + item.Coordenadayy + "&" + item.SupermercadoName + "&";
        }
    }
    private class SupermercadosProductosModel
    {
        public string? SupermercadoName { get; set; }
        public string? Direccion { get; set; } = string.Empty;
        public string? Coordenadaxx { get; set; } = string.Empty;
        public string? Coordenadayy { get; set; } = string.Empty;
        public List<Producto>? productos { get; set; }
    }
}
